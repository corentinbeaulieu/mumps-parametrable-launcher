#!/bin/bash

# Check the inputs

if [[ $# != 10 ]]; then
    printf >&2 "\e[33mUSAGE:\e[0m %s job n bandwidth density symmetry num_proc num_threads par inctl13 ordering\n" "$0"
    exit 1
fi

job=$1
n=$2
bandwidth=$3
density=$4
symmetry=$5
num_proc=$6
num_threads=$7
par=$8
icntl_13=${9}
ordering=${10}

## FIXME: complex support is broken for the moment. The generator does not support complex matrix.
##   We have to find a way to construct complex matrix while keeping the non-singularity property.
#
# type=$1
# case $type in
#     real)
#         type_int=0
#         ;;
#     complex)
#         type_int=1
#         ;;
#     *)
#         printf >&2 "\e[31mERROR\e[0m %s is a not a valid datatype (possible values: real complex)\n" "$type"
#         exit 1
#         ;;
# esac
# type="real"
type_int=0

do_analysis=0
do_factorization=0

case "$job" in
"at")
    do_analysis=1
    ;;
"ae")
    do_analysis=1
    ;;
"ft")
    do_factorization=1
    ;;
"fe")
    do_factorization=1
    ;;
"aft")
    do_analysis=1
    do_factorization=1
    ;;
"afe")
    do_analysis=1
    do_factorization=1
    ;;
"-h")
    printf "\e[33mUSAGE:\e[0m %s job n bandwidth density symmetry num_proc num_threads par inctl13 ordering\n" "$0"
    exit 0
    ;;
*)
    printf >&2 "\e[31mERROR\e[0m Wrong job value: %s (possible: at, ae, ft, fe, aft, afe)\n" "$job"
    exit 2
    ;;
esac

if [[ $n == "" || $(printf "%s" "$n" | grep -E -vo "[1-9][0-9]*") != "" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is a not a valid integer for N\n" "$n"
    exit 3
fi

if [[ $(echo "$bandwidth" | grep -E -vo "0.[0-9]*") != "" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is a not a valid real for bandwidth\n" "$bandwidth"
    exit 4
fi

if [[ $(echo "$density" | grep -E -vo "0.[0-9]*") != "" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is a not a valid real for density\n" "$density"
    exit 5
fi

if [[ $symmetry != "0" && $symmetry != "1" && $symmetry != "2" && $symmetry != "0.0" && $symmetry != "1.0" && $symmetry != "2.0" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is a wrong symmetry kind\n" "$symmetry"
    exit 6
fi

if [[ $(echo "$num_threads" | grep -E -o "[1-9][0-9]*") == "" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is a wrong number of threads\n" "$num_threads"
    exit 7
fi

if [[ $(echo "$num_proc" | grep -E -o "[1-9][0-9]*") == "" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is a wrong number of MPI ranks\n" "$num_threads"
    exit 8
fi

if [[ $(echo "$par" | grep -E -o "(0|1)") == "" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is not a proper PAR parameter (0 or 1)\n" "$par"
    exit 9
fi

if [[ $(echo "$icntl_13" | grep -E -o "([1-9][0-9]*)|-1|0") == "" ]]; then
    printf >&2 "\e[31mERROR\e[0m %s is not a proper ICNTL 13 parameter (-1, 0 or >0)\n" "$icntl_13"
    exit 10
fi

case "$ordering" in
"metis")
    ordering_int=1
    ;;
"pord")
    ordering_int=2
    ;;
"scotch")
    ordering_int=3
    ;;
"ptscotch")
    ordering_int=4
    ;;
*)
    printf >&2 "\e[31mERROR\e[0m %s is not a proper ordering parameter (metis, pord, scotch, ptscotch)\n" "$ordering"
    exit 11
    ;;
esac

has_workdir_changed=0
if [[ ${WORKDIR} == "" ]]; then
    export WORKDIR="/tmp/mumps_launches"
    has_workdir_changed=1
fi

timestamp=$(date -u +"%Y%m%d%H%M%S")
outputdir="${WORKDIR}/out"
outputfile="${outputdir}/tmp${timestamp}.out"

mkdir -p "${WORKDIR}/Saved_analysis"
mkdir -p "${outputdir}"

# EAR salloc options
ear_options="--ear=on --ear-user-db=eardata --ear-cpufreq=2100000"

# Log the inputs
printf "%s %d %s %s %d %d %d %d %d %s " "$job" "$n" "$bandwidth" "$density" "$symmetry" "$num_proc" "$num_threads" "$par" "$icntl_13" "$ordering" >>launch.log

# Run both stages
if [[ $do_analysis -eq 1 && $do_factorization -eq 1 ]]; then
    # Launch the MUMPS executable with the given matrix size and symmetry
    KMP_AFFINITY=scatter OMP_NESTED=TRUE MKL_NUM_THREADS="$num_threads" OMP_NUM_THREADS="$num_threads" \
        @LAUNCH_CMD@ @MUMPS_EXEC_CALL@ "-afg" "$type_int" "$n" "$bandwidth" "$density" "$symmetry" "$par" "$icntl_13" "$num_threads" "$ordering_int" \
        1>"$outputfile" 2>>err.out

# Run Analysis stage
elif [[ $do_analysis -eq 1 ]]; then
    # Launch the MUMPS executable with the given matrix size and symmetry
    KMP_AFFINITY=scatter OMP_NESTED=TRUE MKL_NUM_THREADS="$num_threads" OMP_NUM_THREADS="$num_threads" \
        @LAUNCH_CMD@ @MUMPS_EXEC_CALL@ "-ag" "$type_int" "$n" "$bandwidth" "$density" "$symmetry" "$par" "$icntl_13" "$num_threads" "$ordering_int" \
        1>"$outputfile" 2>>err.out

# Run Factorization stage
elif [[ $do_factorization -eq 1 ]]; then
    # Launch the MUMPS executable with the given matrix size and symmetry
    KMP_AFFINITY=scatter OMP_NESTED=TRUE MKL_NUM_THREADS="$num_threads" OMP_NUM_THREADS="$num_threads" \
        @LAUNCH_CMD@ @MUMPS_EXEC_CALL@ "-fg" "$type_int" "$n" "$bandwidth" "$density" "$symmetry" "$par" "$icntl_13" "$num_threads" "$ordering_int" \
        1>"$outputfile" 2>>err.out
fi

exec_error=$(grep -E "\*\* ERROR RETURN \*\* FROM DMUMPS INFO\(1\)=" "$outputfile" | cut -d '=' -f2)

# Check for an error
if [[ $exec_error != "" ]]; then
    if [[ $(echo "$exec_error" | grep -E -v -- "-7[0-9]") != "" ]]; then
        printf >&2 "\e[31mERROR\e[0m An error occured during the execution\n"
        printf "\n" >>launch.log
        exit 14
    fi
fi

# Retrieve the times mesures by MUMPS
analysis_time=$(grep "Analysis time by clock_gettime" "$outputfile" | grep -E -o "[0-9]*\.[0-9]*")
analysis_energy=$(grep "ANALYSIS EAR" "$outputfile" | cut -d ',' -f1 | grep -E -o "[0-9]*")
factorization_time=$(grep "Factorization time by clock_gettime" "$outputfile" | grep -E -o "[0-9]*\.[0-9]*")
factorization_energy=$(grep "FACTORIZATION EAR" "$outputfile" | cut -d ',' -f1 | grep -E -o "[0-9]*")

# Select the value to return
case "$job" in
"at")
    result=$analysis_time
    ;;
"ae")
    result=$analysis_energy
    ;;
"ft")
    result=$factorization_time
    ;;
"fe")
    result=$factorization_energy
    ;;
"aft")
    result="$analysis_time,$factorization_time"
    ;;
"afe")
    result="$analysis_energy,$factorization_energy"
    ;;
esac

printf "%s\n" "$result" >>launch.log
if [[ -z "$result" ]]; then
    printf >&2 "\e[31mERROR\e[0m An error occured during the execution\n"
    exit 15
fi

# Retrieve the result
echo "$result"

if [[ $has_workdir_changed -eq 1 ]]; then
    unset WORKDIR
fi

# rm -f "$outputfile"
